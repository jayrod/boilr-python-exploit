#!/bin/python3
__version__ = "0.1"

import sys
import argparse
from ipaddress import ip_address

class Util:

    def msg(message: str) -> str:
        return "[+] {0}".format(message)

    def err_msg(message: str) -> str:
        return "[!] {0}".format(message)

class ExploitDefinition:
    def show():
        def = dict()
        def['Name'] = ''
        def['Description'] = '{{ExploitDescription}}'
        def['Privileged'] = ''
        def['Platform'] = '{{Platform}}'
        
def validate_input(args) -> ip_address:
    """ Validates and formulates user input. This function can make default
    decisions about where to get environment variable input from and what form
    it should take.

        Arguments:
            args(argparser): Arguments to validate

        Return:
            ip_address: Default target ip address

    """
    # determine if the input IP address is inface an IP
    ip = None

    try:
        # if no target host given
        if not args.target:
            # look for RHOST environ var
            if "RHOST" in environ.keys():
                print(Util().msg("Using Environment variable for IP address"))
                ip = ip_address(environ["RHOST"])
        else:
            ip = ip_address(args.target)

    except ValueError:
        print(
            Util().err_msg(
                "Argument or environment variable was not a valid IP address"
            )
        )
        sys.exit()

    return ip

def main():
    print("Executing {{ExploitName}} version %s." % __version__)
    parser = argparse.ArgumentParser()
    parser.add_argument("target_host", help="IP address for target.")
    args = parser.parse_args()

    if not validate_input(args):
        print(Util().err_msg("Arguments provided are not valid"))
        sys.exit(1)

if __name__ == "__main__":
    main()
